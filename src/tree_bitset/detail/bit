#pragma once
// Catch2 doesn't support /std:c++latest with VS2019, but we need std::countr_zero stuff, so use msvc intrinsics directly

#include <type_traits>

#if __has_cpp_attribute(__cpp_lib_bitops) || (defined(__APPLE__) && __cplusplus >= 201707)
#include <bit>
#else
#include <immintrin.h>

namespace std {
template <typename T>
int countr_zero(T x)
{
  static_assert(std::is_unsigned_v<T>);

  if constexpr(sizeof(T) < 4)
  {
    return _tzcnt_u32(x) & static_cast<T>(~0);
  }
  else if constexpr(sizeof(T) == 4)
  {
    return _tzcnt_u32(x);
  }
  else if constexpr(sizeof(T) == 8)
  {
    return static_cast<int>(_tzcnt_u64(x));
  }
  else
  {
    static_assert(sizeof(T) <= 8, "this type isn't supported");
  }
}

template <typename T>
int countl_zero(T x)
{
  static_assert(std::is_unsigned_v<T>);

  if constexpr(sizeof(T) == 1)
  {
    return _lzcnt_u32(x) - 24;
  }
  else if constexpr(sizeof(T) == 2)
  {
    return _lzcnt_u32(x) - 16;
  }
  else if constexpr(sizeof(T) == 4)
  {
    return _lzcnt_u32(x);
  }
  else if constexpr(sizeof(T) == 8)
  {
    return static_cast<int>(_lzcnt_u64(x));
  }
  else
  {
    static_assert(sizeof(T) <= 8, "this type isn't supported");
  }
}

template <typename T>
int countl_one(T x)
{
  static_assert(std::is_unsigned_v<T>);
  return countl_zero<T>(~x);
}

template <typename T>
int countr_one(T x)
{
  static_assert(std::is_unsigned_v<T>);
  return countr_zero<T>(~x);
}

}
#endif
